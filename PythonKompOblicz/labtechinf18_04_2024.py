# -*- coding: utf-8 -*-
"""LabTechInf18.04.2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xS_UlYrtziMQhn38fVWuTetTxDirvmU4
"""

import math
import time
import random

# Filip Gajewski 251687 zadanie 8
# poniższa lista opisów dotyczy opisów zadań do wykonania, taka forma ułatwia modyfikowanie opisów zadań
description = [
    "Program wypisuje wyniki podstawowych działań na krotkach.",
    "Program operuje między typem danych krotka a lista.",
    "Program zwraca wartości funkcji trygonometrycznych jako krotki.",
    "Program modyfikuje krotkę z danymi artysty.",
    "Program modyfikuję krotki z listy krotek."
]


# funkcja która pobiera od użytkownika liczbę i nie pozwala wczytać innej wartości
# dla poprawnego działania powinno się ją używać w następujący sposób:
# user_input = (get_num_input("Enter the number: ", expected_type_of_value)
def get_user_input(prompt, type=str, condition=None, prompt_if_condition=None):
    while True:
        try:
            user_input = type(input(prompt))
            if condition is None or condition(user_input):
                return user_input
            else:
                # "Wprowadzona wartość nie spełnia warunku."
                print(prompt_if_condition)
        except ValueError:
            print(f"Podana wartość nie jest liczbą typu {type.__name__}. Spróbuj ponownie.")


def ex1():
    print("\n---ZADANIE PIERWSZE---\n")
    k1 = (1.2, 3.4, 5.6)
    k2 = (3.6, -1.1, 0.3)
    print("k1:\n", k1, "\nk2:\n", k2)

    k3 = tuple(x + y for x, y in zip(k1, k2))
    print("Krotka k3:", k3)

    num_elements = len(k3)
    print("Ilość elementów w krotce k3:", num_elements)

    sum_of_elements = sum(k3)
    min_element = min(k3)
    max_element = max(k3)
    print("Suma elementów:", sum_of_elements)
    print("Minimalny element:", min_element)
    print("Maksymalny element:", max_element)

    third_element = k3[2]
    first_two_elements = k3[:2]
    rest_of_elements = k3[3:]
    print("Trzeci element krotki:", third_element)
    print("Pierwsze dwa elementy krotki:", first_two_elements)
    print("Wszystkie elementy bez pierwszych trzech:", rest_of_elements)

    # Krotki są niemodyfikowalne, więc nie można dodać nowego elementu ani zmienić wartości istniejącego elementu.
    print("\nDo krotek nie mozna dodac nowego elementu!")
    try:
      k1 += (10)
    except Exception as e:
      print("To jest kontrolowany bład z dodaniem wartości do krotki, o nazwie: \n", e)
    try:
      k1[2] = (10)
    except Exception as e:
      print("To jest kontrolowany bład zmiany wartości, o nazwie: \n", e)

def ex2():
    print("\n---ZADANIE DRUGIE---\n")
    imiona = ("Ola", "Ala", "Wiola", "Iza", "Monika", "Magda")

    print("Elementy krotki imiona:")
    for imie in imiona:
        print(imie)

    lista_imion = list(imiona)
    print("Lista imion:", lista_imion)
    print("Typ listy imion:", type(lista_imion).__name__)

    lista_imion[1] = "Agnieszka"
    print("Lista imion po zmianie drugiego imienia:", lista_imion)

    imiona2 = tuple(lista_imion)
    print("Krotka imiona2:", imiona2)


def TrygFunct(kat_stopnie):
    kat_radiany = math.radians(kat_stopnie)
    sin_kat = math.sin(kat_radiany)
    cos_kat = math.cos(kat_radiany)
    return sin_kat, cos_kat


def ex3():
    print("\n---ZADANIE TRZECIE---\n")
    kat = get_user_input("Podaj miarę kąta w stopniach: ", float)
    wyniki = TrygFunct(kat)
    print("Wartość sinusa kąta:", wyniki[0])
    print("Wartość cosinusa kąta:", wyniki[1])
    print("Typ danych:", type.__name__(wyniki))


def modify_artist(artist_tuple):
    import datetime
    artist_name = artist_tuple[0].upper()
    birth_year = artist_tuple[1]
    current_year = datetime.datetime.now().year
    age = current_year - birth_year
    modified_artist_tuple = (artist_name, age)
    return modified_artist_tuple


def ex4():
    print("\n---ZADANIE CZWARTE---\n")
    artist = ("Bono", 1960)
    modified_artist = modify_artist(artist)
    print("Zmodyfikowana krotka:", modified_artist)


def ex5():
    print("\n---ZADANIE PIĄTE---\n")
    artists = [
        ("Lisa Gerrard", 1961),
        ("Ofra Haza", 1957),
        ("Bono", 1960),
        ("Kate Bush", 1958),
        ("Sting", 1951)
    ]

    for artist in artists:
        modified_artist = modify_artist(artist)
        print("Zmodyfikowana krotka dla", artist[0] + ":", modified_artist)


# główne menu programu
def main_menu():
    print("\nWitam w moim programie na Technologie Informatyczne 8.")
    print("Program ma na celu wykonywanie zadań z dokumentacji.")
    print("W celu realizacji danego zadania podaj jego numer, a w celu zakończenia programu wpisz numer zadania 0.")
    time.sleep(1)
    for i in range(0, len(description)):
        print(f"{chr(0x2022)} Zadanie {i + 1}.\n Opis: {description[i]}")
        time.sleep(0.5)

    # dictionay przechowywujace numer jako klucz, oraz
    tasks = {1: ex1, 2: ex2, 3: ex3, 4: ex4, 5: ex5}
    while True:
        try:
            user_choice = get_user_input(f"\n{chr(0x2022)} Podaj numer zadania, które chcesz wykonać: ", int, lambda x: 0 <= x <= len(tasks), f"Nieznany numer funkcji, podaj poprawny numer od 1 do {len(tasks)}, lub 0 aby wyjsc.")
            if user_choice in tasks:
                tasks[user_choice]()
            elif user_choice == 0:
                break
        except Exception as e:
            print("Wystąpił błąd programu, sprobuj ponownie.\n", e)
    print("\nDziękuję za skorzystanie z mojego programu.")
    input()


# główna funkcja, która zarządza działaniem programu jeżeli jest on poprawnie uruchomiony (nie importowany jako moduł)
if __name__ == '__main__':
  try:
    main_menu()
  except KeyboardInterrupt:
      print("\n\nRozumiem, że chcesz skończyć mój program, w takim razie do zobaczenia! ¯\_(ツ)_/¯")
###
import time


def draw_hangman(errors):
    stages = [  # Lista kolejnych etapów rysowania
        """
           --------
           |      |
           |
           |
           |
           |
           -
        """,
        """
           --------
           |      |
           |      O
           |
           |
           |
           -
        """,
        """
           --------
           |      |
           |      O
           |      |
           |
           |
           -
        """,
        """
           --------
           |      |
           |      O
           |     /|
           |
           |
           -
        """,
        """
           --------
           |      |
           |      O
           |     /|\\
           |
           |
           -
        """,
        """
           --------
           |      |
           |      O
           |     /|\\
           |     /
           |
           -
        """,
        """
           --------
           |      |
           |      O
           |     /|\\
           |     / \\
           |
           -
        """
    ]
    return stages[errors]

# Przykład użycia:
errors = 0  # Liczba popełnionych błędów
for i in range(7):
    print(draw_hangman(i))
    time.sleep(1)