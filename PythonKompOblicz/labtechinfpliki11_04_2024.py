# -*- coding: utf-8 -*-
"""LabTechInfPliki11.04.2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dzOwu-PT15CIVxPliZpgSl_6s8L6CHv6
"""

import math
import time
import random

# Filip Gajewski 251687 zadanie 7
# poniższa lista opisów dotyczy opisów zadań do wykonania, taka forma ułatwia modyfikowanie opisów zadań
description = [
    "Program otwiera, zapisuje wierszyk do pliku tekstowego.",
    "Program odczytuje całą zawartość, linia po linii, i zapisuje do listy łańcuchów.",
    "Program zapisuje kwadraty pierwszych n liczb naturalnych do pliku.",
    "Program generuje dwuwymiarową listę z losowymi liczbami i zapisuje do pliku.",
    "Program odczytuje dwuwymiarową listę z pliku."
]


# funkcja która pobiera od użytkownika konkretny typ zmiennej i nie pozwala wczytać innej wartości
# dla poprawnego działania powinno się ją używać w następujący sposób:
# user_input = get_user_input(prompt_to_print, expected_type_of_value, statement)
# user_input = get_user_input("Enter the positive number: ", float, lambda x: x>0, "This number's not positive")
def get_user_input(prompt, type=str, condition=None, prompt_if_condition=None):
    while True:
        try:
            user_input = type(input(prompt))
            if condition is None or condition(user_input):
                return user_input
            else:
                # "Wprowadzona wartość nie spełnia warunku."
                print(prompt_if_condition)
        except ValueError:
            print(f"Podana wartość nie jest liczbą typu {type.__name__}. Spróbuj ponownie.")


# funkcja walidująca nazwę pliku tekstowego podanego przez użytkownika
# Przykładowe użycie funkcji:
# user_filename = validate_filename(get_user_input("Enter file name: "))
def validate_filename(filename):
    if filename.endswith(".txt"):
        return filename
    else:
        return filename + ".txt"


# zadanie 1
def ex1():
    print("\n---ZADANIE PIERWSZE---\n")
    file_name = validate_filename(get_user_input("Podaj nazwę pliku tekstowego: "))
    str1 = "Uderzył deszcz, wybuchła noc, przy drodze pusty dwór"
    lst = [
        "W katedrach drzew, w przyłbicach gór, wagnerowski ton",
        "Za witraża dziwnym szkłem, pustych komnat chłód",
        "W szary pył rozbity czas, martwy, pusty dwór"
    ]

    try:
        with open(file_name, "w") as file:
            file.write(str1 + "\n")
            file.writelines([elem + "\n" for elem in lst])
        print(f"Pomyślnie zapisano do pliku {file_name}.")
    except IOError:
        print(f"Wystąpił problem z zapisem do pliku {file_name}.")
    finally:
        file.close()


# zadanie 2
def ex2():
    print("\n---ZADANIE DRUGIE---\n")
    file_name = validate_filename(get_user_input("Podaj nazwę pliku tekstowego: "))

    try:
        with open(file_name, "r") as file:
            file_content = file.read()
            file.seek(0)
            first_line = file.readline()
            remaining_lines = file.readlines()

            print("Cała zawartość pliku została odczytana do łańcucha:\n", file_content)
            print("\nPierwsza linia odczytana za pomocą readline()\n:", first_line)
            print("\nPozostałe linie wyświetlone za pomocą pętli for:\n")
            for line in remaining_lines:
                print(line.strip())

            file.seek(0)   # ustawienie wskaźnika na poczatek pliku
            lines_list = file.readlines()
            print("\nCała zawartość pliku została odczytana do listy łańcuchów:\n", lines_list)
    except FileNotFoundError:
        print("Plik", file_name, "nie został znaleziony.")
    except IOError:
        print("Wystąpił problem podczas odczytu pliku", file_name)
    finally:
        file.close()


# zadanie 3
def ex3():
    print("\n---ZADANIE TRZECIE---\n")
    file_name = validate_filename(get_user_input("Podaj nazwę pliku tekstowego: "))
    n = get_user_input("Podaj ilu liczb naturalnych chcesz mieć kwadraty: ", int, lambda x: x>0)
    try:
        with open(file_name, "w") as file:
            squares = [str(i ** 2) for i in range(n + 1)]
            file.write(" ".join(squares))
        print("Pomyślnie zapisano kwadraty liczb do pliku", file_name)

        with open(file_name, "r") as file:
            numbers = [int(num) for num in file.read().split()]
        print(f"Zawartość pliku {file_name} została wczytana do listy liczb całkowitych:", numbers)
    except IOError:
        print("Wystąpił problem z zapisem lub odczytem pliku", file_name)
    finally:
        file.close()


# zadanie 4
def ex4():
    print("\n---ZADANIE CZWARTE---\n")
    file_name = validate_filename(get_user_input("Podaj nazwę pliku tekstowego: "))
    try:
        with open(file_name, "w") as file:
            for _ in range(4):
                row = " ".join([str(random.randint(0, 20)) for _ in range(4)])
                file.write(row + "\n")
        print("Pomyślnie zapisano losowe liczby do pliku", file_name)

        with open(file_name, "r") as file:
            array = [[int(num) for num in line.split()] for line in file.readlines()]
        print("Tablica została wczytana z pliku:", array)
    except IOError:
        print("Wystąpił problem z zapisem lub odczytem pliku", file_name)
    finally:
        file.close()


# zadanie 5
def ex5():
    print("\n---ZADANIE PIĄTE---\n")
    file_name = validate_filename(get_user_input("Podaj nazwę pliku tekstowego: "))
    try:
        with open(file_name, "r") as file:
            array = [[int(num) for num in line.split()] for line in file.readlines()]
        print("Tablica została wczytana z pliku:", array)
    except IOError:
        print("Wystąpił problem z odczytem pliku", file_name)
    finally:
        file.close()


# główne menu programu
def main_menu():
    print("\nWitam w moim programie na Technologie Informatyczne 7.")
    print("Program ma na celu wykonywanie zadań z dokumentacji.")
    print("W celu realizacji danego zadania podaj jego numer, a w celu zakończenia programu wpisz numer zadania 0.")
    time.sleep(1)
    for i in range(0, len(description)):
        print(f"{chr(0x2022)} Zadanie {i + 1}.\n Opis: {description[i]}")
        time.sleep(0.25)

    # dictionay przechowywujace numer jako klucz, oraz
    tasks = {1: ex1, 2: ex2, 3: ex3, 4: ex4, 5: ex5}
    while True:
        try:
            user_choice = get_user_input(f"\n{chr(0x2022)} Podaj numer zadania, które chcesz wykonać: ", int, lambda x: 0 <= x <= len(tasks), f"Nieznany numer funkcji, podaj poprawny numer od 1 do {len(tasks)}, lub 0 aby wyjsc.")
            if user_choice in tasks:
                tasks[user_choice]()
            elif user_choice == 0:
                print("Program robi brrrrrr:")
                print("""
           --------
           |      |
           |      O
           |     /|\\
           |     / \\
           |
           -
        """)
                break
        except Exception as e:
            print("Wystąpił błąd programu.\n", e)

    print("\nDziękuję za skorzystanie z mojego programu.")


# główna funkcja, która zarządza działaniem programu jeżeli jest on poprawnie uruchomiony (nie importowany jako moduł)
if __name__ == '__main__':
    main_menu()
    input()  # ukłon w stronę konsoli, sprawi to że okienko nie zamknie się odrazu lecz poczeka do wsićnięsia enter-a