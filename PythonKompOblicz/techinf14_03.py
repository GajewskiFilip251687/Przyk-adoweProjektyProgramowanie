# -*- coding: utf-8 -*-
"""TechInf14.03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NVn10a_-glZ-C_lF-M2mlqCdkK5YQn1w
"""

import math as m
import time


# Filip Gajewski 251687 zadanie 3
# poniższa lista opisów dotyczy opisów zadań do wykonania, taka forma ułatwia modyfikowanie opisów zadań
description = [
    "Program pobiera liczbę całkowitą, po czy wyświetla kilka zależnych zbiorów.",
    "Program pobiera od użytkownika liczbę i wypisujej jej dzielniki, oraz określa czy jest liczbą pierwszą.",
    "Program wyświetla tabliczkę mnożenia od 1 do 10.",
    "Program wyświetla tabelę wartości f-cji trygonometrycznych, co zadaną wartość w stopniach.",
    "Program wyświetla pionową sinusoidę."
]


# funkcja formatuje liczby z inputu, usuwa nie potrzebne ".0" w przypadków zmiennych typu float
def format_number(num):
    if num == int(num):
        return int(num)
    else:
        return float(num)


# funkcja która pobiera od użytkownika liczbę i nie pozwala wczytać innej wartości
# dla poprawnego działania powinno się ją używać w następujący sposób:
# user_input = format_number(get_num_input("Enter the number: "))
def get_num_input(prompt):
    while True:
        try:
            user_num_input = float(input(prompt))
            return user_num_input
        except ValueError:
            print("Podana wartość nie jest liczbą. Spróbuj ponownie.")


def ex1():
    print("\n---ZADANIE PIERWSZE---\n")
    # Wszystkie liczby od 1 do n
    while True:
        try:
            n = int(get_num_input("Podaj liczbę naturalną n: "))
            if n < 1:
                print('Liczba powinna być większa od 1.')
                continue
            break
        except ValueError:
            print('Liczba powinna być naturalna i większa od 1.')

    print(f"Wszystkie liczby od 1 do {n}:")
    for i in range(1, n + 1):
        print(i, end=" ")
    print("\n")

    # Wszystkie liczby od n do 1
    print(f"Wszystkie liczby od {n} do 1:")
    for i in range(n, 0, -1):
        print(i, end=" ")
    print("\n")

    # Wszystkie liczby nieparzyste mniejsze od n
    print(f"Wszystkie liczby nieparzyste mniejsze od {n}:")
    for i in range(1, n):
        if i % 2 != 0:
            print(i, end=" ")
    print("\n")

    # Wszystkie liczby parzyste mniejsze od n, dające przy dzieleniu przez 3 resztę 2
    print(f"Wszystkie liczby parzyste mniejsze od {n} dające przy dzieleniu przez 3 resztę 2:")
    for i in range(2, n, 2):
        if i % 3 == 2:
            print(i, end=" ")
    print("\n")

    # Wszystkie wielokrotności liczby 5 mniejsze od n
    print(f"Wszystkie wielokrotności liczby 5 mniejsze od {n}:")
    for i in range(5, n, 5):
        print(i, end=" ")
    print("\n")

    # Wszystkie małe litery alfabetu od 'a' do 'z'
    print("Wszystkie małe litery alfabetu:")
    for letter in range(ord('a'), ord('z')+1):
        print(chr(letter), end=" ")
    print("\n")


def ex2():
    print("\n---ZADANIE DRUGIE---\n")

    def check_prime_number(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1, 2):
            if num % i == 0:
                return False
        return True

    def find_divisors(num):
        divisors = []
        for i in range(1, num + 1):
            if num % i == 0:
                divisors.append(i)
        return divisors

    num = int(get_num_input("Podaj liczbę naturalną: "))

    divisors = find_divisors(abs(num))

    print("Dzielniki liczby", num, "to:", ', '.join(str(d) for d in divisors))

    if check_prime_number(num):
        print(num, "jest liczbą pierwszą.")
    else:
        print(num, "nie jest liczbą pierwszą.")


def ex3():
    print("\n---ZADANIE TRZECIE---\n")
    for i in range(1, 11):
        row = ""
        print("-" * 48)
        for j in range(1, 11):
            product = i * j
            row += f"{product:2} | "
        print(row[:-2])  # Usunięcie ostatnich dwóch znaków "| " z ostatniej kolumny


def ex4():
    print("\n---ZADANIE CZWARTE---\n")
    # degrees = int(input("Podaj liczbę stopni: "))
    increment = int(get_num_input("Podaj podziałkę (co ile stopni): "))

    print("Degrees  |  Sin   |  Cos   |   Tan   |  Cot")
    print("-" * 45)

    for degree in range(0, 91, increment):
        radians = m.radians(degree)
        sin_value = m.sin(radians)
        cos_value = m.cos(radians)
        if degree % 90 == 0 and degree != 0:
            tan_value_str = "Und "
        else:
            tan_val = m.tan(radians)
            tan_value_str = f"{tan_val:.2f}"
        if degree == 0:
            con_value_str = "Und"
        else:
            con_val = 1/m.tan(radians)
            con_value_str = f"{con_val:.2f}"
        print(f"{degree:7}  |  {sin_value:.2f}  |  {cos_value:.2f}  |  {tan_value_str}   |  {con_value_str}")


def ex5():
    print("\n---ZADANIE PIĄTE---\n")

    def print_sin():
        for y in range(height):
            x = width // 2 + int(amplitude * m.sin(2 * m.pi * frequency * y / height))
            line = [' '] * width
            if 0 <= x < width:
                line[x] = '*'
            print(''.join(line))
            time.sleep(0.05)

    height = 20
    width = 40
    amplitude = 20  # optymalne wartości zmiennych
    frequency = 1
    while True:
        try:
            count = int(get_num_input("Podaj ile razy chcesz zobaczyć zawijańca: "))
            if count > 0:
                break
            print('Liczba powinna być większa od 0!')
        except ValueError:
            print('Niepoprawne dane.')
    for _ in range(count):
        print_sin()


# główna funkcja, która zarządza działaniem programu jeżeli jest on poprawnie uruchomiony (nie importowany jako moduł)
if __name__ == '__main__':
    while True:
        print("\nWitam w moim programie na Technologie Informatyczne 3.")
        time.sleep(1)
        print("Program ma na celu wykonywanie zadań z dokumentacji.")
        print("W celu realizacji danego zadania podaj jego numer, a w celu zakończenia programu wpisz numer zadania 0.")
        time.sleep(1)
        for i in range(0, len(description)):
            print(f"{chr(0x2022)} Zadanie {i + 1}.\n Opis: {description[i]}")
            time.sleep(0.5)
        try:
            user_choice = int(get_num_input("\nPodaj numer zadania, które chcesz wykonać: "))
            if user_choice == 1:
                ex1()
            elif user_choice == 2:
                ex2()
            elif user_choice == 3:
                ex3()
            elif user_choice == 4:
                ex4()
            elif user_choice == 5:
                ex5()
            elif user_choice == 0:
                break
            else:
                print("Nieznany numer funkcji, podaj poprawny numer od 1 do 5.")
        except ValueError:
            print("Błąd! Program uruchomi się ponownie...")

    print("\nDziękuję za skorzystanie z mojego programu.")
    input()