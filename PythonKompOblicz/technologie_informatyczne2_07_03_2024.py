# -*- coding: utf-8 -*-
"""Technologie Informatyczne2.07.03.2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AOoJzqqGstI-D3SKf4zn3wpWXF0df_SF
"""

import math as m
import numpy as np
import matplotlib.pyplot as plt

# Filip Gajewski 251687 zadanie 2

# funkcja formatuje liczby z inputu, usuwa nie potrzebne ".0" w przypadków zmiennych typu float
def format_number(num):
    if num == int(num):
        return int(num)
    else:
        return float(num)


# funkcja która pobiera od użytkownika liczbę i nie pozwala wczytać innej wartości
# dla poprawnego działania powinno się ją używać w następujący sposób:
# user_input = format_number(get_num_input("Enter the number: "))
def get_num_input(prompt):
    while True:
        try:
            user_num_input = float(input(prompt))
            return user_num_input
        except ValueError:
            print("Podana wartość nie jest liczbą. Spróbuj ponownie.")


def ex1():
    print("\n---ZADANIE PIERWSZE---\n")

    points = get_num_input("Podaj liczbe punktów ucznia: ")
    if 0 <= points <= 10:
        rating = 2
    elif 11 <= points <= 13:
        rating = 3
    elif 14 <= points <= 16:
        rating = 4
    elif 17 <= points <= 20:
        rating = 5
    else:
        print("Nie ma takiej punktacji za to kolokwium.")
        return
    print(f"Uczeń otrzymał za kolokwium ocenę {rating}")
    # return rating


def function_value(a, b, c, x):
    return c + x*(b + a*x)


def ex2():
    print("\n---ZADANIE DRUGIE---\n")
    print("Podaj współczynniki funkcji kwadratowej.")
    while True:
        a = format_number(get_num_input("Podaj (niezerową) liczbę jako współczynnik kierunkowy funkcji kwadratowej: "))
        if a != 0:
            break
    b = format_number(get_num_input("Podaj liczbę jako współczynnik b funkcji kwadratowej: "))
    c = format_number(get_num_input("Podaj liczbę jako wyraz wolny w funkcji kwadratowej: "))
    formula = "f(x) = "
    if a == 1:
        formula += "x^2"
    elif a == -1:
        formula += "-x^2"
    else:
        formula += f"{a}x^2"

    if b != 0:
        if b == 1:
            formula += " + x"
        elif b == -1:
            formula += " - x"
        else:
            if b > 0 and formula:
                formula += f" + {b}x"
            else:
                formula += f" - {b * (-1)}x"

    if c != 0:
        if c > 0:
            formula += f" + {c}"
        else:
            formula += f" - {c * (-1)}"
    print(formula)

    delta = (b ** 2) - (4 * a * c)
    arr_of_zeros = []

    if delta < 0:
        print("Nie ma miejsc zerowych.")
    elif delta == 0:
        print("Funkcja ma dokładnie jedno miejsce zerowe.")
        x0 = (-b) / (2 * a)
        arr_of_zeros = [x0]
        print(f"Miejsce zerowe jest równe x0 = {format_number(x0)}")
    elif delta > 0:
        print("Funkcja ma dwa miejsca zerowe.")
        x1 = (-b - m.sqrt(delta)) / (2 * a)
        x2 = (-b + m.sqrt(delta)) / (2 * a)
        arr_of_zeros = [x1, x2]
        print(f"Miejsca zerowe są równe x1 = {format_number(x1)} oraz x2 = {format_number(x2)}")
    # rysunek
    vertex_x = -b / (2 * a)
    vertex_y = -delta / (4 * a)
    print(f'Wierzchołek W = ({vertex_x}, {vertex_y})')
    if arr_of_zeros:
        left_end = min(arr_of_zeros) - 1
        right_end = max(arr_of_zeros) + 1
    else:
        left_end = vertex_x - 3
        right_end = vertex_x + 3
    args = np.linspace(left_end, right_end, 41)
    values = function_value(a, b, c, args)

    plt.plot(args, values, label=formula)
    plt.scatter(vertex_x, vertex_y, color='red', label=f'Wierzchołek: ({format_number(vertex_x)}, {format_number(vertex_y)})')
    for x_zero in arr_of_zeros:
        plt.scatter(x_zero, 0, color='green', label=f'x{arr_of_zeros.index(x_zero) + 1} = {format_number(x_zero)}')
    plt.xlabel('Argumenty')
    plt.ylabel('Wartości')
    plt.title('Fragment wykresu funkcji kwadratowej')
    plt.grid(True)
    plt.legend(loc="upper left")
    plt.axis('equal')  # Ustawienie proporcjonalnych osi
    plt.grid(which='major', ls='-.')    # generowanie podziałki na wykresie "w tle" (siatka na wykresie)
    plt.plot([left_end, right_end], [0, 0], '--', c='k')   # generowanie osi OX
    if a > 0:
        plt.plot([0, 0], [1.2 * vertex_y, max(function_value(a, b, c, left_end), function_value(a, b, c, right_end))], '--', c='k')  # generowanie osi OY
        # plt.ylim(-10, 10)
    elif a < 0:
        plt.plot([0, 0], [min(function_value(a, b, c, left_end), function_value(a, b, c, right_end)), 1.2 * vertex_y], '--', c='k')
        # plt.ylim(-10, 10)
    # Ustawienie zakresu osi x i y oraz liczby kroków na osiach
    # plt.xticks(np.arange(-5, 6, step=1))
    # plt.yticks(np.arange(-10, 10, step=2))
    plt.show()


def ex3():
    print("\n---ZADANIE TRZECIE---\n")
    cost = 0
    quantity = format_number(get_num_input("Podaj ilość zużytej energii (w kWh): "))
    if 0 <= quantity <= 50:
        cost = quantity * 0.5
    elif 50 < quantity <= 150:
        cost = 50 * 0.5 + (quantity - 50) * 0.75
    elif 150 < quantity <= 250:
        cost = 50 * 0.5 + (150 - 50) * 0.75 + (quantity - 150) * 1.2
    elif 250 < quantity:
        cost = 50 * 0.5 + (150 - 50) * 0.75 + (250 - 150) * 1.2 + (quantity - 250) * 1.5

    print(f'Całkowity koszt energii brutto wynosi {round(cost * 1.22, 2)} PLN')


def ex4():
    print("\n---ZADANIE CZWARTE---\n")
    days = ["Poniedziałek", "Wtorek", "środa", "Czwartek", "Piątek", "Sobota", "Niedziela"]
    print("Dzisiaj jest miesiąc marzec.")
    # num:int
    while True:
        try:
            num = int(get_num_input("Podaj numer dnia dla którego chcesz obliczyć dzień tygodnia: "))
            break
        except ValueError:
            print("Dzień tygodnia jest określony liczbą naturalną! Podaj liczbę naturalną do 31.")
    if 0 < num <= 31:
        print(f"{num} dzień marca to {days[((num - 3) % 7) - 1]}")
    else:
        print("Nie ma takiego dnia w marcu")


def ex5():
    while True:
        # Pobierz literę od użytkownika
        try:
            letter = input("Podaj literę: ")
            if not(65 <= ord(letter) <= 90 or 97 <= ord(letter) <= 122):
                print('To nie jest literka.')
                continue
            # Sprawdź czy litera jest mała
            if letter.islower():
                # Zamień na wielką literę
                letter = letter.upper()
            # Wyświetl literę
            print("Wprowadzona litera:", letter)
            break
        except ValueError:
            print("To nie jest jedna literka.")


if __name__ == "__main__":
    while True:
        print("\nWybierz numer zadania (1-5), lub wpisz '0' aby zakończyć:")
        user_input = int(get_num_input("Numer zadania: "))

        if user_input == 0:
            break
        elif user_input == 1:
            ex1()
        elif user_input == 2:
            #ex2()
            print('test')
        elif user_input == 3:
            ex3()
        elif user_input == 4:
            ex4()
        elif user_input == 5:
            ex5()
        else:
            print("Nieznany numer funkcji, podaj poprawny numer od 1 do 5.")
    print("Zakończono program.")

import numpy as np
import matplotlib.pyplot as plt

def function_value(a, b, c, x):
    return c + x*(b + a*x)


middle = -2.5
left_end = middle - 4
right_end = middle + 4
args = np.linspace(left_end, right_end, 41)
values = function_value(1, 5, 6, args)
arr_of_zeros = [-3, -2]


plt.plot(args, values)    #rysowanie wykresu funkcji
plt.scatter(arr_of_zeros, [0 for k in range(0, len(arr_of_zeros))], c='#ed092f', s=30,  label="Msc zerowe")   #rysowanie punktów (msc zerowych)
plt.grid(which='major', ls='-.')    #generowanie podziałki na wykresie "w tle" (siatka na wykresie)
plt.plot([left_end, right_end], [0, 0], '--', c='k')   #generowanie osi OX
plt.plot([0, 0], [-10, 10], '--', c='k')   #generowanie osi OY
plt.legend(loc="upper left")    #umiejscowienie legendy wykresu (lewy górny róg)
plt.show()    #wygenerowanie wykresu z dodanymi powyżej komponentami

import numpy as np
import matplotlib.pyplot as plt

def function_value(a, b, c, x):
    return c + x*(b + a*x)


a = 3
b = 3
c = 3
middle = -2.5
vertex_y = function_value(a, b, c, middle)
left_end = middle - 3
right_end = middle + 3
args = np.linspace(left_end, right_end, 41)
values = function_value(a, b, c, args)
arr_of_zeros = [-3, -2]

plt.plot(args, values, label=f'y = {a}x^2 + {b}x + {c}')
plt.scatter(middle, function_value(a, b, c, middle), color='red', label=f'Wierzchołek: ({middle:.2f}, {function_value(a, b, c, middle):.2f})')
for x_zero in arr_of_zeros:
    plt.scatter(x_zero, 0, color='green', label=f'x{arr_of_zeros.index(x_zero) + 1}: ({x_zero:.2f}, 0)')
plt.xlabel('Argumenty')
plt.ylabel('Wartości')
plt.title('Fragment wykresu funkcji kwadratowej')
plt.grid(True)
plt.legend()
plt.axis('equal')  # Ustawienie proporcjonalnych osi
plt.grid(which='major', ls='-.')    #generowanie podziałki na wykresie "w tle" (siatka na wykresie)
plt.plot([left_end, right_end], [0, 0], '--', c='k')   #generowanie osi OX
if a > 0:
    plt.plot([0, 0], [vertex_y - 3, max(function_value(a, b, c, right_end), function_value(a, b, c, right_end))], '--', c='k')   #generowanie osi OY
elif a < 0:
    plt.plot([0, 0], [min(function_value(a, b, c, right_end), function_value(a, b, c, right_end)), vertex_y + 3], '--', c='k')
# Ustawienie zakresu osi x i y oraz liczby kroków na osiach
#plt.xlim(-5, 5)
#plt.ylim(-10, 10)
#plt.xticks(np.arange(-5, 6, step=1))
#plt.yticks(np.arange(-10, 11, step=2))

plt.show()

arr_zeros = {-2}

if arr_zeros:
    left_end = min(arr_zeros) - 1
    right_end = min(arr_zeros) + 1
else:
    print("error")

print(left_end, right_end)